name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  AZURE_WEB_APP: 'github-actions-test-anilappari'
  TAG: /usr/bin/git log -1 --format='%h'
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # - name: Official SonarQube Scan
    #   # You may pin to the exact commit or the version. https://github.com/SonarSource/sonarqube-scan-action
    #   # uses: SonarSource/sonarqube-scan-action@7295e71c9583053f5bf40e9d4068a0c974603ec8
    #   uses: SonarSource/sonarqube-scan-action@v1.1.0
    #   env:
    #       SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
    #       SONAR_HOST_URL: ${{ secrets.SONARQUBE_SERVER_URL }}
    #   with:
    #     # Additional arguments to the sonar-scanner SONARQUBE_TOKEN SONARQUBE_SERVER_URL
    #     args: > 
    #       -Dsonar.projectKey=githubactions_test
    #     # Set the sonar.projectBaseDir analysis property
    #     projectBaseDir: # optional, default is .

    # - name: SonarQube Quality Gate check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   # Force to fail step after specific time
    #   timeout-minutes: 5
    #   env:
    #    SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

# #################################    
# ################################# 
#     - name: CodeReady Dependency Analytics
#   # You may pin to the exact commit or the version.
#   # uses: redhat-actions/crda@b20b5ba04415ef7c44549749b031e60e8c1dd508
#   uses: redhat-actions/crda@v1
#   with:
#     # Path to the directory containing the manifest_file.

#     manifest_directory: # optional
#     # Name (basename) of the manifest file to analyze. This file must exist in the manifest_directory.

#     manifest_file: # optional
#     # Command to use for dependencies installation instead of using the
# default commands.

#     deps_install_cmd: # optional
#     # Name of the file to save the analysis report
#     analysis_report_name: # optional, default is crda_analysis_report
#     # Snyk token to be used to authenticate to the CRDA
#     snyk_token: # optional
#     # Existing CRDA key to identify the existing user
#     crda_key: # optional
#     # Github token to upload sarif file to the GitHub
#     github_token: # optional, default is ${{ github.token }}
#     # Upload the generated sarif file, by default it is set to "true".
# If you don't want to upload sarif file set this input to "false"

#     upload_sarif: # optional, default is true
#     # CRDA collects anonymous usage data, and is disabled by default.
# If you want this behaviour set this to "true"

#     consent_telemetry: # optional, default is false
#     # Fail the workflow if vulnerability is found in the project.
# This will lead to workflow failure and sarif file would not be uploaded.
# To set failure when vulnerability severity level is either "error" or "warning" set this input to "warning".
# By default it is set to fail when severity level is "error",
# or if you don't want to fail the action set this input to "never"

#     fail_on: # optional, default is error
# #################################    
# ################################# 




    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag myimage:latest

    - name: testrun
      run: docker run -d --name test myimage:latest && curl $(docker inspect test --format="{{.NetworkSettings.Networks.bridge.IPAddress}}" )

    # - uses: azure/container-scan@v0 ##https://github.com/marketplace/actions/container-image-scan
    #   with: 
    #     image-name: myimage:latest

    - name: Tag the Docker image
      run: docker image tag myimage '${{secrets.ACR_LOGIN_SERVER}}'/my-image-name:$(${{env.TAG}})

    - name: login to acr
      run: docker login -u '${{secrets.ACR_LOGIN_NAME}}' -p '${{secrets.ACR_PASSWORD}}' '${{secrets.ACR_LOGIN_SERVER}}'

    - name: push to ecr
      run: docker push '${{secrets.ACR_LOGIN_SERVER}}'/my-image-name:$(${{env.TAG}})

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDS_SP }}

    - name: Azure WebApp Deployment
      uses: Azure/webapps-deploy@v2.2.3
      with: 
        app-name: github-actions-test-anilappari
        images: ${{secrets.ACR_LOGIN_SERVER}}/my-image-name:latest

